version: 2

jobs:
  build:
    docker:
      - image: circleci/python:3.8.1
      - image: circleci/postgres:12.0-alpine-ram
        environment:
          POSTGRES_USER: circleci
          POSTGRES_DB: mobilic-test
    steps:
      - checkout
      - restore_cache:
          key: pip-{{ .Branch }}-{{ checksum "requirements.txt" }}
      - run:
          command: |
            python3 -m venv venv
            source venv/bin/activate
            pip install -r requirements.txt
      - save_cache:
          key: pip-{{ .Branch }}-{{ checksum "requirements.txt" }}
          paths:
            - "venv"
      - run:
          command: dockerize -wait tcp://localhost:5432 -timeout 1m
      - run:
          command: |
            source venv/bin/activate
            flask test
          environment:
            FLASK_APP: "app:app"
            FLASK_DEBUG: "1"

  format:
    docker:
      - image: circleci/python:3.8.1
    steps:
      - checkout
      - restore_cache:
          key: pip-{{ .Branch }}-{{ checksum "requirements.txt" }}
      - run:
          command: |
            python3 -m venv venv
            source venv/bin/activate
            pip install -r requirements.txt
      - save_cache:
          key: pip-{{ .Branch }}-{{ checksum "requirements.txt" }}
          paths:
            - "venv"
      - run:
          command: |
            source venv/bin/activate
            black --exclude env --check .

  deploy:
    docker:
      - image: circleci/python:3.8.1
    steps:
      - checkout
      - run:
          name: Deploy to Heroku
          command: git push https://heroku:$HEROKU_API_KEY@git.heroku.com/$HEROKU_APP_NAME.git master

workflows:
  version: 2
  build_and_deploy:
    jobs:
      - build
      - format
      - deploy:
          requires:
            - build
            - format
          filters:
            branches:
              only: master
