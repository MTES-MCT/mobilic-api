"""add_regulation_tables

Revision ID: a97dbdd7b65a
Revises: bc7abe3eb83c
Create Date: 2022-06-14 11:05:40.543036

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "a97dbdd7b65a"
down_revision = "bc7abe3eb83c"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "regulation_check",
        sa.Column("creation_time", sa.DateTime(), nullable=False),
        sa.Column(
            "type",
            sa.Enum(
                "minimumDailyRest",
                "maximumWorkDayTime",
                "minimumWorkDayBreak",
                "maximumUninterruptedWorkTime",
                "maximumWorkedDaysInWeek",
                name="regulationchecktype",
                native_enum=False,
            ),
            nullable=False,
        ),
        sa.Column("label", sa.String(length=255), nullable=False),
        sa.Column("description", sa.TEXT(), nullable=True),
        sa.Column("date_application_start", sa.Date(), nullable=False),
        sa.Column("date_application_end", sa.Date(), nullable=True),
        sa.Column(
            "regulation_rule",
            sa.Enum(
                "dailyWork",
                "dailyRest",
                "weeklyWork",
                "weeklyRest",
                name="regulationrule",
                native_enum=False,
            ),
            nullable=False,
        ),
        sa.Column(
            "variables",
            postgresql.JSONB(none_as_null=True, astext_type=sa.Text()),
            nullable=True,
        ),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "regulation_day",
        sa.Column("creation_time", sa.DateTime(), nullable=False),
        sa.Column("day", sa.Date(), nullable=False),
        sa.Column("success", sa.Boolean(), nullable=False),
        sa.Column(
            "extra",
            postgresql.JSONB(none_as_null=True, astext_type=sa.Text()),
            nullable=True,
        ),
        sa.Column(
            "submitter_type",
            sa.Enum(
                "employee", "admin", name="submittertype", native_enum=False
            ),
            nullable=False,
        ),
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column("regulation_check_id", sa.Integer(), nullable=False),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["regulation_check_id"],
            ["regulation_check.id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["user.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint(
            "day",
            "user_id",
            "regulation_check_id",
            "submitter_type",
            name="only_one_entry_per_user_day_check_and_submitter_type",
        ),
    )
    op.create_index(
        op.f("ix_regulation_day_regulation_check_id"),
        "regulation_day",
        ["regulation_check_id"],
        unique=False,
    )
    op.create_table(
        "regulation_week",
        sa.Column("creation_time", sa.DateTime(), nullable=False),
        sa.Column("week", sa.Date(), nullable=False),
        sa.Column("success", sa.Boolean(), nullable=False),
        sa.Column(
            "extra",
            postgresql.JSONB(none_as_null=True, astext_type=sa.Text()),
            nullable=True,
        ),
        sa.Column(
            "submitter_type",
            sa.Enum(
                "employee", "admin", name="submittertype", native_enum=False
            ),
            nullable=False,
        ),
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column("regulation_check_id", sa.Integer(), nullable=False),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["regulation_check_id"],
            ["regulation_check.id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["user.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint(
            "week",
            "user_id",
            "regulation_check_id",
            "submitter_type",
            name="only_one_entry_per_user_week_check_and_submitter_type",
        ),
    )
    op.create_index(
        op.f("ix_regulation_week_regulation_check_id"),
        "regulation_week",
        ["regulation_check_id"],
        unique=False,
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(
        op.f("ix_regulation_week_regulation_check_id"),
        table_name="regulation_week",
    )
    op.drop_table("regulation_week")
    op.drop_index(
        op.f("ix_regulation_day_regulation_check_id"),
        table_name="regulation_day",
    )
    op.drop_table("regulation_day")
    op.drop_table("regulation_check")
    # ### end Alembic commands ###
