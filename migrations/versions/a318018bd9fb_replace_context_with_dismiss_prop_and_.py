"""Replace context with dismiss prop and make events read-only

Revision ID: a318018bd9fb
Revises: f2e6fb409232
Create Date: 2020-03-06 15:15:49.234686

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "a318018bd9fb"
down_revision = "f2e6fb409232"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "activity", sa.Column("dismiss_author_id", sa.Integer(), nullable=True)
    )
    op.add_column(
        "activity",
        sa.Column(
            "dismiss_type",
            sa.Enum(
                "no_activity_switch",
                "unauthorized_submitter",
                "user_cancel",
                name="activitydismisstype",
                native_enum=False,
            ),
            nullable=True,
        ),
    )
    op.add_column(
        "activity", sa.Column("dismissed_at", sa.DateTime(), nullable=True)
    )
    op.add_column(
        "activity", sa.Column("is_driver_switch", sa.Boolean(), nullable=True)
    )
    op.create_index(
        op.f("ix_activity_dismiss_author_id"),
        "activity",
        ["dismiss_author_id"],
        unique=False,
    )
    op.create_foreign_key(
        None, "activity", "user", ["dismiss_author_id"], ["id"]
    )
    op.create_check_constraint(
        "non_nullable_dismiss_type",
        "activity",
        "((dismissed_at is not null)::bool = (dismiss_type is not null)::bool)",
    )
    op.create_check_constraint(
        "non_nullable_dismiss_author_id",
        "activity",
        "(dismiss_type != 'user_cancel' OR dismiss_author_id is not null)",
    )
    op.execute(
        """
            UPDATE activity set is_driver_switch = 
                CASE 
                    WHEN context is not null AND context::text[] @> ARRAY['driver_switch'] THEN true
                    ELSE null
                END;
            CREATE TEMP TABLE my_type (t1 text, t2 timestamp , t3 int) ON COMMIT DROP;
            WITH o(id, dismiss_type, dismissed_at, dismiss_author_id) AS (
                SELECT 
                    id,
                    (CASE
                        WHEN context is not null AND context::text[] @> ARRAY['no_activity_switch', 'unauthorized_submitter'] THEN (context[1], creation_time, submitter_id)::my_type
                        WHEN cancelled_at is not null THEN ('user_cancel', cancelled_at, submitter_id)::my_type
                        ELSE (null, null, null)::my_type
                    END).*
                FROM activity
            )
            UPDATE activity set (dismiss_type, dismissed_at, dismiss_author_id) = (o.dismiss_type, o.dismissed_at, o.dismiss_author_id)
                FROM o WHERE o.id = activity.id
        """
    )
    op.drop_column("activity", "context")
    op.drop_column("activity", "cancelled_at")

    op.add_column(
        "comment", sa.Column("dismiss_author_id", sa.Integer(), nullable=True)
    )
    op.add_column(
        "comment",
        sa.Column(
            "dismiss_type",
            sa.Enum(
                "unauthorized_submitter",
                "user_cancel",
                name="dismisstype",
                native_enum=False,
            ),
            nullable=True,
        ),
    )
    op.add_column(
        "comment", sa.Column("dismissed_at", sa.DateTime(), nullable=True)
    )
    op.create_index(
        op.f("ix_comment_dismiss_author_id"),
        "comment",
        ["dismiss_author_id"],
        unique=False,
    )
    op.create_foreign_key(
        None, "comment", "user", ["dismiss_author_id"], ["id"]
    )
    op.create_check_constraint(
        "non_nullable_dismiss_type",
        "comment",
        "((dismissed_at is not null)::bool = (dismiss_type is not null)::bool)",
    )
    op.create_check_constraint(
        "non_nullable_dismiss_author_id",
        "comment",
        "(dismiss_type != 'user_cancel' OR dismiss_author_id is not null)",
    )
    op.execute(
        """
            WITH o(id, dismiss_type, dismissed_at, dismiss_author_id) AS (
                SELECT 
                    id,
                    (CASE
                        WHEN context is not null AND context::text[] @> ARRAY['no_activity_switch', 'unauthorized_submitter'] THEN (context[1], creation_time, submitter_id)::my_type
                        ELSE (null, null, null)::my_type
                    END).*
                FROM comment
            )
            UPDATE comment set (dismiss_type, dismissed_at, dismiss_author_id) = (o.dismiss_type, o.dismissed_at, o.dismiss_author_id)
                FROM o WHERE o.id = comment.id
        """
    )
    op.drop_column("comment", "context")

    op.add_column(
        "expenditure",
        sa.Column("dismiss_author_id", sa.Integer(), nullable=True),
    )
    op.add_column(
        "expenditure",
        sa.Column(
            "dismiss_type",
            sa.Enum(
                "unauthorized_submitter",
                "user_cancel",
                name="dismisstype",
                native_enum=False,
            ),
            nullable=True,
        ),
    )
    op.add_column(
        "expenditure", sa.Column("dismissed_at", sa.DateTime(), nullable=True)
    )
    op.create_index(
        op.f("ix_expenditure_dismiss_author_id"),
        "expenditure",
        ["dismiss_author_id"],
        unique=False,
    )
    op.create_foreign_key(
        None, "expenditure", "user", ["dismiss_author_id"], ["id"]
    )
    op.create_check_constraint(
        "non_nullable_dismiss_type",
        "expenditure",
        "((dismissed_at is not null)::bool = (dismiss_type is not null)::bool)",
    )
    op.create_check_constraint(
        "non_nullable_dismiss_author_id",
        "expenditure",
        "(dismiss_type != 'user_cancel' OR dismiss_author_id is not null)",
    )
    op.execute(
        """
            WITH o(id, dismiss_type, dismissed_at, dismiss_author_id) AS (
                SELECT 
                    id,
                    (CASE
                        WHEN context is not null AND context::text[] @> ARRAY['no_activity_switch', 'unauthorized_submitter'] THEN (context[1], creation_time, submitter_id)::my_type
                        WHEN cancelled_at is not null THEN ('user_cancel', cancelled_at, submitter_id)::my_type
                        ELSE (null, null, null)::my_type
                    END).*
                FROM expenditure
            )
            UPDATE expenditure set (dismiss_type, dismissed_at, dismiss_author_id) = (o.dismiss_type, o.dismissed_at, o.dismiss_author_id)
                FROM o WHERE o.id = expenditure.id
        """
    )
    op.drop_column("expenditure", "context")
    op.drop_column("expenditure", "cancelled_at")
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "expenditure",
        sa.Column(
            "cancelled_at",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "expenditure",
        sa.Column(
            "context",
            postgresql.ARRAY(sa.VARCHAR(length=255)),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.drop_constraint(None, "expenditure", type_="foreignkey")
    op.drop_index(
        op.f("ix_expenditure_dismiss_author_id"), table_name="expenditure"
    )
    op.drop_column("expenditure", "dismissed_at")
    op.drop_column("expenditure", "dismiss_type")
    op.drop_column("expenditure", "dismiss_author_id")
    op.add_column(
        "comment",
        sa.Column(
            "context",
            postgresql.ARRAY(sa.VARCHAR(length=255)),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.drop_constraint(None, "comment", type_="foreignkey")
    op.drop_index(op.f("ix_comment_dismiss_author_id"), table_name="comment")
    op.drop_column("comment", "dismissed_at")
    op.drop_column("comment", "dismiss_type")
    op.drop_column("comment", "dismiss_author_id")
    op.add_column(
        "activity",
        sa.Column(
            "cancelled_at",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "activity",
        sa.Column(
            "context",
            postgresql.ARRAY(sa.TEXT()),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.drop_constraint(None, "activity", type_="foreignkey")
    op.drop_index(op.f("ix_activity_dismiss_author_id"), table_name="activity")
    op.drop_column("activity", "is_driver_switch")
    op.drop_column("activity", "dismissed_at")
    op.drop_column("activity", "dismiss_type")
    op.drop_column("activity", "dismiss_author_id")
    # ### end Alembic commands ###
