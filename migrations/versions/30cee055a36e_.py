"""add cohort criteria function

Revision ID: 30cee055a36e
Revises: 59d3ad8f0527
Create Date: 2023-10-09 06:09:04.788459

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = "30cee055a36e"
down_revision = "59d3ad8f0527"
branch_labels = None
depends_on = None


def upgrade():
    conn = op.get_bind()
    conn.execute(
        """
        CREATE OR REPLACE FUNCTION cohort_criteria(column_name text, vyear integer) 
        RETURNS TABLE (
            registration_year integer,
            registration_month integer,
            registered_companies bigint,
            first_month bigint,
            second_month bigint,
            third_month bigint,
            fourth_month bigint,
            fifth_month bigint,
            sixth_month bigint,
            seventh_month bigint
        )
        LANGUAGE plpgsql
        AS $$
        DECLARE
            query text;
        BEGIN
            -- Sanity check   
            IF vyear IS NULL OR vyear < 2000 OR vyear > 9999 THEN
                RAISE EXCEPTION 'The year must be in YYYY format (between 2000 and 9999)';
            END IF;

            query := '
                SELECT
                    EXTRACT(YEAR FROM cs.company_creation_date)::integer AS registration_year,
                    EXTRACT(MONTH FROM cs.company_creation_date)::integer AS registration_month,
                    COUNT(DISTINCT cs.company_id)::bigint AS registered_companies,
                    COUNT(DISTINCT CASE WHEN EXTRACT(MONTH FROM cs.' || quote_ident(column_name) || ') = EXTRACT(MONTH FROM cs.company_creation_date) THEN cs.company_id END)::bigint AS first_month,
                    COUNT(DISTINCT CASE WHEN EXTRACT(MONTH FROM cs.' || quote_ident(column_name) || ') = EXTRACT(MONTH FROM cs.company_creation_date) + 1 THEN cs.company_id END)::bigint AS second_month,
                    COUNT(DISTINCT CASE WHEN EXTRACT(MONTH FROM cs.' || quote_ident(column_name) || ') = EXTRACT(MONTH FROM cs.company_creation_date) + 2 THEN cs.company_id END)::bigint AS third_month,
                    COUNT(DISTINCT CASE WHEN EXTRACT(MONTH FROM cs.' || quote_ident(column_name) || ') = EXTRACT(MONTH FROM cs.company_creation_date) + 3 THEN cs.company_id END)::bigint AS fourth_month,
                    COUNT(DISTINCT CASE WHEN EXTRACT(MONTH FROM cs.' || quote_ident(column_name) || ') = EXTRACT(MONTH FROM cs.company_creation_date) + 4 THEN cs.company_id END)::bigint AS fifth_month,
                    COUNT(DISTINCT CASE WHEN EXTRACT(MONTH FROM cs.' || quote_ident(column_name) || ') = EXTRACT(MONTH FROM cs.company_creation_date) + 5 THEN cs.company_id END)::bigint AS sixth_month,
                    COUNT(DISTINCT CASE WHEN EXTRACT(MONTH FROM cs.' || quote_ident(column_name) || ') = EXTRACT(MONTH FROM cs.company_creation_date) + 6 THEN cs.company_id END)::bigint AS seventh_month
                FROM
                    company_stats AS cs
                WHERE
                    EXTRACT(YEAR FROM cs.company_creation_date) = $1
                GROUP BY
                    registration_year, registration_month
                ORDER BY
                    registration_year, registration_month';

            RETURN QUERY EXECUTE query USING vyear;
        END;
        $$;
        COMMIT;
    """
    )

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.execute(
        "DROP FUNCTION cohort_criteria(column_name text, vyear integer)"
    )
    # ### end Alembic commands ###
