"""Remove expenditure and team enrollment

Revision ID: f61f00cde16f
Revises: 1648f72277eb
Create Date: 2020-04-26 22:59:43.266887

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "f61f00cde16f"
down_revision = "1648f72277eb"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index("ix_expenditure_dismiss_author_id", table_name="expenditure")
    op.drop_index("ix_expenditure_submitter_id", table_name="expenditure")
    op.drop_index("ix_expenditure_user_id", table_name="expenditure")
    op.drop_table("expenditure")
    op.drop_index(
        "ix_team_enrollment_dismiss_author_id", table_name="team_enrollment"
    )
    op.drop_index(
        "ix_team_enrollment_revisee_id", table_name="team_enrollment"
    )
    op.drop_index(
        "ix_team_enrollment_submitter_id", table_name="team_enrollment"
    )
    op.drop_index("ix_team_enrollment_user_id", table_name="team_enrollment")
    op.drop_table("team_enrollment")
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "team_enrollment",
        sa.Column(
            "creation_time",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "event_time",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "dismissed_at",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "dismiss_type",
            sa.VARCHAR(length=22),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "dismiss_received_at",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "type", sa.VARCHAR(length=6), autoincrement=False, nullable=False
        ),
        sa.Column(
            "user_id", sa.INTEGER(), autoincrement=False, nullable=False
        ),
        sa.Column(
            "submitter_id", sa.INTEGER(), autoincrement=False, nullable=False
        ),
        sa.Column(
            "dismiss_author_id",
            sa.INTEGER(),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column(
            "revisee_id", sa.INTEGER(), autoincrement=False, nullable=True
        ),
        sa.Column(
            "user_time",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "dismiss_comment", sa.TEXT(), autoincrement=False, nullable=True
        ),
        sa.Column(
            "revision_comment", sa.TEXT(), autoincrement=False, nullable=True
        ),
        sa.CheckConstraint(
            "((dismiss_type)::text <> 'user_cancel'::text) OR (dismiss_author_id IS NOT NULL)",
            name="non_nullable_dismiss_author_id",
        ),
        sa.CheckConstraint(
            "(dismiss_type)::text = ANY ((ARRAY['unauthorized_submitter'::character varying, 'user_cancel'::character varying])::text[])",
            name="dismisstype",
        ),
        sa.CheckConstraint(
            "(type)::text = ANY ((ARRAY['enroll'::character varying, 'remove'::character varying])::text[])",
            name="teamenrollmenttype",
        ),
        sa.CheckConstraint(
            "((dismissed_at IS NOT NULL) = (dismiss_type IS NOT NULL)) AND ((dismiss_type IS NOT NULL) = (dismiss_received_at IS NOT NULL))",
            name="non_nullable_dismiss_type",
        ),
        sa.CheckConstraint(
            "submitter_id <> user_id",
            name="team_enrollment_cannot_target_self",
        ),
        sa.ForeignKeyConstraint(
            ["dismiss_author_id"],
            ["user.id"],
            name="team_enrollment_dismiss_author_id_fkey",
        ),
        sa.ForeignKeyConstraint(
            ["revisee_id"],
            ["team_enrollment.id"],
            name="team_enrollment_revisee_id_fkey",
        ),
        sa.ForeignKeyConstraint(
            ["submitter_id"],
            ["user.id"],
            name="team_enrollment_submitter_id_fkey",
        ),
        sa.ForeignKeyConstraint(
            ["user_id"], ["user.id"], name="team_enrollment_user_id_fkey"
        ),
        sa.PrimaryKeyConstraint("id", name="team_enrollment_pkey"),
    )
    op.create_index(
        "ix_team_enrollment_user_id",
        "team_enrollment",
        ["user_id"],
        unique=False,
    )
    op.create_index(
        "ix_team_enrollment_submitter_id",
        "team_enrollment",
        ["submitter_id"],
        unique=False,
    )
    op.create_index(
        "ix_team_enrollment_revisee_id",
        "team_enrollment",
        ["revisee_id"],
        unique=False,
    )
    op.create_index(
        "ix_team_enrollment_dismiss_author_id",
        "team_enrollment",
        ["dismiss_author_id"],
        unique=False,
    )
    op.create_table(
        "expenditure",
        sa.Column(
            "creation_time",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "event_time",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "type", sa.VARCHAR(length=10), autoincrement=False, nullable=False
        ),
        sa.Column(
            "user_id", sa.INTEGER(), autoincrement=False, nullable=False
        ),
        sa.Column(
            "submitter_id", sa.INTEGER(), autoincrement=False, nullable=False
        ),
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column(
            "dismiss_author_id",
            sa.INTEGER(),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "dismiss_type",
            sa.VARCHAR(length=22),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "dismissed_at",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "dismiss_received_at",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "dismiss_comment", sa.TEXT(), autoincrement=False, nullable=True
        ),
        sa.CheckConstraint(
            "((dismiss_type)::text <> 'user_cancel'::text) OR (dismiss_author_id IS NOT NULL)",
            name="non_nullable_dismiss_author_id",
        ),
        sa.CheckConstraint(
            "(dismiss_type)::text = ANY ((ARRAY['unauthorized_submitter'::character varying, 'user_cancel'::character varying])::text[])",
            name="dismisstype",
        ),
        sa.CheckConstraint(
            "(type)::text = ANY ((ARRAY['day_meal'::character varying, 'night_meal'::character varying, 'sleep_over'::character varying, 'snack'::character varying])::text[])",
            name="expendituretypes",
        ),
        sa.CheckConstraint(
            "((dismissed_at IS NOT NULL) = (dismiss_type IS NOT NULL)) AND ((dismiss_type IS NOT NULL) = (dismiss_received_at IS NOT NULL))",
            name="non_nullable_dismiss_type",
        ),
        sa.ForeignKeyConstraint(
            ["dismiss_author_id"],
            ["user.id"],
            name="expenditure_dismiss_author_id_fkey",
        ),
        sa.ForeignKeyConstraint(
            ["submitter_id"], ["user.id"], name="expenditure_submitter_id_fkey"
        ),
        sa.ForeignKeyConstraint(
            ["user_id"], ["user.id"], name="expenditure_user_id_fkey"
        ),
        sa.PrimaryKeyConstraint("id", name="expenditure_pkey"),
    )
    op.create_index(
        "ix_expenditure_user_id", "expenditure", ["user_id"], unique=False
    )
    op.create_index(
        "ix_expenditure_submitter_id",
        "expenditure",
        ["submitter_id"],
        unique=False,
    )
    op.create_index(
        "ix_expenditure_dismiss_author_id",
        "expenditure",
        ["dismiss_author_id"],
        unique=False,
    )
    # ### end Alembic commands ###
