"""Add churn() function

Revision ID: 59d3ad8f0527
Revises: dc0d42d537a6
Create Date: 2023-10-06 16:10:49.364836

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = "59d3ad8f0527"
down_revision = "dc0d42d537a6"
branch_labels = None
depends_on = None


def upgrade():
    conn = op.get_bind()
    conn.execute(
        """
        CREATE OR REPLACE FUNCTION churn(vyear INTEGER, is_weekly BOOLEAN DEFAULT FALSE, vmonth INTEGER DEFAULT NULL)
        RETURNS TABLE (
            registration_year INTEGER,
            registration_period INTEGER,
            registered_companies BIGINT,
            churn_1 NUMERIC,
            invited_employees BIGINT,
            churn_2 NUMERIC,
            onboarded BIGINT
        ) AS $$
        BEGIN
            -- Sanity checks
            IF (vyear < 2000 OR vyear > 9999) THEN
                RAISE EXCEPTION 'The year must be in YYYY format (between 2000 and 9999)';
            END IF;
            IF vmonth = 0 THEN
                vmonth := NULL;
            END IF;
            IF vmonth IS NOT NULL AND (vmonth < 1 OR vmonth > 12) THEN
                RAISE EXCEPTION 'The month must be in MM format (between 01 and 12)';
            END IF;
            IF (is_weekly IS NOT TRUE AND is_weekly IS NOT FALSE) THEN
                RAISE EXCEPTION 'is_weekly must be a BOOLEAN value (TRUE or FALSE)';
            END IF;

            RETURN QUERY
            WITH base_data AS (
                SELECT
                    cs.company_id,
                    EXTRACT(YEAR FROM cs.company_creation_date)::INTEGER AS year,
                    EXTRACT(MONTH FROM cs.company_creation_date)::INTEGER AS month,
                    EXTRACT(WEEK FROM cs.company_creation_date)::INTEGER AS week,
                    cs.first_employee_invitation_date <= CURRENT_DATE AS invited_employee,
                    cs.first_mission_validation_by_admin_date <= CURRENT_DATE AS validated_mission
                FROM
                    company_stats cs
                WHERE
                    EXTRACT(YEAR FROM cs.company_creation_date) = vyear
                    AND (vmonth IS NULL OR EXTRACT(MONTH FROM cs.company_creation_date) = vmonth)
            ),
            aggregated_data AS (
                SELECT
                    year,
                    (CASE WHEN is_weekly THEN week ELSE month END) AS period,
                    COUNT(DISTINCT company_id) AS total_registered_companies,
                    COUNT(DISTINCT CASE WHEN invited_employee THEN company_id ELSE NULL END) AS total_invited_employees,
                    COUNT(DISTINCT CASE WHEN validated_mission THEN company_id ELSE NULL END) AS total_validated_missions
                FROM
                    base_data
                GROUP BY
                    year, period
            )
            SELECT
                year AS "Année",
                period AS registration_period,
                total_registered_companies AS "Inscrites",
                1-(total_invited_employees::DECIMAL/total_registered_companies) AS "CHURN 1",
                total_invited_employees AS "Salariés invités",
                1-(total_validated_missions::DECIMAL/total_invited_employees) AS "CHURN 2",
                total_validated_missions AS "Onboarded"
            FROM
                aggregated_data
            ORDER BY
                registration_year, registration_period;
        END
        $$ LANGUAGE plpgsql STABLE;
        """
    )

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.execute("DROP FUNCTION churn(integer, integer, boolean)")
    # ### end Alembic commands ###
