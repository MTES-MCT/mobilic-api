"""Remove team from activity model

Revision ID: 3030266fdd01
Revises: b448927b940a
Create Date: 2020-03-19 11:16:21.075162

"""
from collections import defaultdict
from datetime import timedelta

from alembic import op
import sqlalchemy as sa
from sqlalchemy.orm.session import Session

# revision identifiers, used by Alembic.
revision = "3030266fdd01"
down_revision = "a0c708394373"
branch_labels = None
depends_on = None


def _migrate_team():
    session = Session(bind=op.get_bind())
    teams_to_create = defaultdict(lambda: defaultdict(list))
    activities = session.execute(
        """
        SELECT a.submitter_id, a.start_time, a.team, a.type, a.dismiss_type, a2.id, u.company_id
        FROM activity a
        JOIN "user" u
        ON a.submitter_id = u.id 
        LEFT JOIN activity a2
        ON a2.revisee_id = a.id
        """
    )
    submitter_to_company = {}
    activities_per_submitter = defaultdict(list)

    for activity in activities:
        activities_per_submitter[activity[0]].append(activity)
        submitter_to_company[activity[0]] = activity[6]

    for submitter_id, submitter_activities in activities_per_submitter.items():
        latest_day_end = None
        for activity in sorted(submitter_activities, key=lambda a: a[1]):
            teams_to_create[submitter_id][latest_day_end].append(
                (activity[2], activity[1])
            )
            if activity[3] == "rest" and not activity[4] and not activity[5]:
                latest_day_end = activity[1]

    for submitter_id in teams_to_create:
        for latest_day_end in teams_to_create[submitter_id]:
            sorted_teams = sorted(
                teams_to_create[submitter_id][latest_day_end],
                key=lambda t: t[1],
            )
            reduced_sorted_teams = sorted_teams[:1]
            for t in sorted_teams[1:]:
                if t[0] != reduced_sorted_teams[-1][0]:
                    reduced_sorted_teams.append(t)

            for previous_team, team in zip(
                [([], 0)] + reduced_sorted_teams[:-1], reduced_sorted_teams
            ):
                new_team_mate_ids = [
                    uid
                    for uid in team[0]
                    if uid != submitter_id and uid not in previous_team[0]
                ]
                removed_team_mate_ids = [
                    uid
                    for uid in previous_team[0]
                    if uid != submitter_id and uid not in team[0]
                ]
                event_time = team[1] - timedelta(seconds=1)

            for user_id in removed_team_mate_ids + new_team_mate_ids:
                session.execute(
                    """
                    INSERT INTO team_enrollment(
                        creation_time,
                        type,
                        action_time,
                        event_time,
                        submitter_id,
                        user_id,
                        company_id
                    )
                    VALUES(
                        NOW(),
                        :type,
                        :action_time,
                        :event_time,
                        :submitter_id,
                        :user_id,
                        :company_id
                    )
                    """,
                    dict(
                        type="remove"
                        if user_id in removed_team_mate_ids
                        else "enroll",
                        action_time=event_time,
                        event_time=event_time,
                        submitter_id=submitter_id,
                        user_id=user_id,
                        company_id=submitter_to_company[submitter_id],
                    ),
                )

    session.flush()


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "activity", sa.Column("driver_id", sa.Integer(), nullable=True)
    )
    op.create_foreign_key(None, "activity", "user", ["driver_id"], ["id"])
    op.execute(
        """
            UPDATE activity SET driver_id = team[driver_idx + 1]
        """
    )
    _migrate_team()
    op.drop_column("activity", "driver_idx")
    # ### end Alembic commands ###


def downgrade():
    op.add_column(
        "activity",
        sa.Column(
            "driver_idx", sa.INTEGER(), autoincrement=False, nullable=True
        ),
    )
    op.drop_constraint(None, "activity", type_="foreignkey")
    op.drop_column("activity", "driver_id")
    # ### end Alembic commands ###
