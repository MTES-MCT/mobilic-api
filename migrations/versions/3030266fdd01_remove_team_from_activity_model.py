"""Remove team from activity model

Revision ID: 3030266fdd01
Revises: b448927b940a
Create Date: 2020-03-19 11:16:21.075162

"""
from collections import defaultdict
from datetime import timedelta

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
from sqlalchemy.orm.session import Session

from app.models import Activity, TeamEnrollment
from app.models.team_enrollment import TeamEnrollmentType

# revision identifiers, used by Alembic.
revision = "3030266fdd01"
down_revision = "b448927b940a"
branch_labels = None
depends_on = None


def _migrate_team():
    session = Session(bind=op.get_bind())
    teams_to_create = defaultdict(lambda: defaultdict(list))
    for activity in session.query(Activity).all():
        submitter = activity.submitter
        latest_day_end = submitter.latest_acknowledged_day_end_at(
            activity.start_time
        )
        teams_to_create[activity.submitter][latest_day_end].append(
            (activity.team, activity.start_time)
        )

    for submitter in teams_to_create:
        for latest_day_end in teams_to_create[submitter]:
            sorted_teams = sorted(
                teams_to_create[submitter][latest_day_end], key=lambda t: t[1]
            )
            reduced_sorted_teams = sorted_teams[:1]
            for t in sorted_teams[1:]:
                if t[0] != reduced_sorted_teams[-1][0]:
                    reduced_sorted_teams.append(t)

            for previous_team, team in zip(
                [([], 0)] + reduced_sorted_teams[:-1], reduced_sorted_teams
            ):
                new_team_mate_ids = [
                    uid
                    for uid in team[0]
                    if uid != submitter.id and uid not in previous_team[0]
                ]
                removed_team_mate_ids = [
                    uid
                    for uid in previous_team[0]
                    if uid != submitter.id and uid not in team[0]
                ]
                event_time = team[1] - timedelta(seconds=1)

            for user_id in removed_team_mate_ids + new_team_mate_ids:
                session.add(
                    TeamEnrollment(
                        type=TeamEnrollmentType.REMOVE
                        if user_id in removed_team_mate_ids
                        else TeamEnrollmentType.ENROLL,
                        action_time=event_time,
                        event_time=event_time,
                        submitter_id=submitter.id,
                        user_id=user_id,
                        company_id=submitter.company_id,
                    )
                )

    session.flush()


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "activity", sa.Column("driver_id", sa.Integer(), nullable=True)
    )
    op.create_foreign_key(None, "activity", "user", ["driver_id"], ["id"])
    op.execute(
        """
            UPDATE activity SET driver_id = team[driver_idx + 1]
        """
    )
    _migrate_team()
    op.drop_column("activity", "driver_idx")
    # ### end Alembic commands ###


def downgrade():
    op.add_column(
        "activity",
        sa.Column(
            "driver_idx", sa.INTEGER(), autoincrement=False, nullable=True
        ),
    )
    op.drop_constraint(None, "activity", type_="foreignkey")
    op.drop_column("activity", "driver_id")
    # ### end Alembic commands ###
