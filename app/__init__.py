import os

import sentry_sdk
from apispec import APISpec
from apispec.ext.marshmallow import MarshmallowPlugin
from flask import Flask, g, jsonify, request
from flask_apispec.extension import FlaskApiSpec
from flask_compress import Compress
from flask_cors import CORS
from flask_migrate import Migrate
from werkzeug.exceptions import HTTPException

import config
from app.helpers.db import SQLAlchemyWithStrongRefSession
from app.helpers.errors import MobilicError
from app.helpers.request_parser import CustomRequestParser
from app.helpers.siren import SirenAPIClient
from app.templates.filters import JINJA_CUSTOM_FILTERS
from config import MOBILIC_ENV

from celery import Celery


sentry_sdk.init(
    dsn=os.environ.get("SENTRY_DSN"),
    traces_sample_rate=os.environ.get("SENTRY_SAMPLE_RATE", 0),
)
app = Flask(__name__)

app.config["CELERY_BROKER_URL"] = "redis://localhost:6379/0"
app.config["CELERY_RESULT_BACKEND"] = "redis://localhost:6379/0"

celery = Celery(app.name, broker=app.config["CELERY_BROKER_URL"])
celery.conf.update(app.config)


@celery.task
def add(x, y):
    return x + y


@celery.task
def insert_user(email, first_name, last_name, admin=False):
    new_user = User(
        email=email, first_name=first_name, last_name=last_name, admin=admin
    )
    db.session.add(new_user)
    db.session.commit()
    return new_user.id


Compress(app)
# See list of possible settings at https://pypi.org/project/Flask-Compress/1.13/
app.config.update({"COMPRESS_MIN_SIZE": 100})
app.config.update(
    {
        "APISPEC_SPEC": APISpec(
            title="Mobilic",
            version="v1",
            openapi_version="3.0.0",
            plugins=[MarshmallowPlugin()],
        ),
        "APISPEC_WEBARGS_PARSER": CustomRequestParser(),
    }
)

docs = FlaskApiSpec(app)

app.config.from_object(getattr(config, f"{MOBILIC_ENV.capitalize()}Config"))

siren_api_client = SirenAPIClient(app.config["SIREN_API_KEY"])

for name, filter in JINJA_CUSTOM_FILTERS.items():
    app.template_filter(name)(filter)

from app.helpers.mail import mailer


db = SQLAlchemyWithStrongRefSession(
    app, session_options={"expire_on_commit": False}
)

if app.config["ECHO_DB_QUERIES"]:
    db.engine.echo = True

Migrate(app, db)

CORS(app)

from app.helpers.graphql import CustomGraphQLView
from app.controllers import (
    graphql_schema,
    private_graphql_schema,
    protected_graphql_schema,
)
from app.helpers import logging

# Uncomment here to display all queries generated by SQLAlchemy
# from app.helpers import debug_queries

# Uncomment to display profiler information in terminal
# from app.helpers import profiler

# Uncomment to log sql queries in a file
# from app.helpers import log_sql_queries_file

from . import commands


@app.before_first_request
def configure_app():
    if MOBILIC_ENV == "prod":
        db.engine.dispose()


graphql_api_path = "/graphql"
graphql_private_api_path = "/unexposed"
graphql_protected_api_path = "/protected"


app.add_url_rule(
    graphql_api_path,
    view_func=CustomGraphQLView.as_view(
        "graphql", schema=graphql_schema, graphiql=True, batch=True
    ),
)

app.add_url_rule(
    graphql_private_api_path,
    view_func=CustomGraphQLView.as_view(
        "unexposed", schema=private_graphql_schema, graphiql=False
    ),
)

app.add_url_rule(
    graphql_protected_api_path,
    view_func=CustomGraphQLView.as_view(
        "protected", schema=protected_graphql_schema, graphiql=True
    ),
)


from app.helpers.oauth import oauth_blueprint

app.register_blueprint(oauth_blueprint, url_prefix="/oauth")

from app.controllers.control import control_blueprint

app.register_blueprint(control_blueprint, url_prefix="/control")


from app.controllers.misc import *
from app.controllers.certificate import *


@app.errorhandler(MobilicError)
def handle_error(error):
    app.logger.exception(error)
    error.extensions.pop("code")
    error_payload = {"error": error.message, "error_code": error.code}
    if error.extensions:
        error_payload["details"] = error.extensions
    return jsonify(error_payload), error.http_status_code


@app.errorhandler(HTTPException)
def handle_error(error):
    app.logger.exception(error)
    return (
        jsonify(
            {
                "error": error.description,
                "error_code": error.name.upper().replace(" ", "_"),
            }
        ),
        error.code,
    )


from .helpers.dataloaders import (
    EmailsInEmploymentLoader,
    UserLoader,
    CommentsInMissionLoader,
    ValidationsInMissionLoader,
    ExpendituresInMissionLoader,
    VehicleLoader,
    VehiclesInCompanyLoader,
    LocationEntriesInMissionLoader,
    ActivitiesInMissionLoader,
    ActivityVersionsInActivityLoader,
)


@app.before_request
def load_loaders():
    g.dataloaders = {
        "emails_in_employments": EmailsInEmploymentLoader(),
        "vehicles_in_company": VehiclesInCompanyLoader(),
        "users": UserLoader(),
        "vehicles": VehicleLoader(),
        "comments_in_missions": CommentsInMissionLoader(),
        "validations_in_missions": ValidationsInMissionLoader(),
        "expenditures_in_missions": ExpendituresInMissionLoader(),
        "location_entries_in_missions": LocationEntriesInMissionLoader(),
        "activities_in_missions": ActivitiesInMissionLoader(),
        "activity_versions_in_activities": ActivityVersionsInActivityLoader(),
    }


@app.after_request
def cleanup_loaders(response):
    del g.dataloaders
    return response


@app.route("/toto")
def index():
    result = add.delay(3, 5)
    # result = add.apply_async(args=[4, 5], countdown=1)
    # print("Task submitted. Waiting for result...")
    # print("Task result:", result.get())
    return str(result.get())


from app.models import User


@app.route("/add_user", methods=["POST"])
def add_user():
    data = request.get_json()
    email = data.get("email")
    first_name = data.get("first_name")
    last_name = data.get("last_name")
    admin = data.get("admin", False)

    task = insert_user.apply_async(args=[email, first_name, last_name, admin])
    return jsonify({"task_id": task.id}), 202


if __name__ == "__main__":
    app.run(debug=True)
